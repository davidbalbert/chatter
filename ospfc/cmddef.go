// Code generated by goyacc -o cmddef.go -p cmddef cmddef.y. DO NOT EDIT.

//line cmddef.y:2

package main

import __yyfmt__ "fmt"

//line cmddef.y:3

//line cmddef.y:7
type cmddefSymType struct {
	yys  int
	node *ast
	s    string
}

const LITERAL = 57346
const VARIABLE = 57347
const WS = 57348

var cmddefToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LITERAL",
	"VARIABLE",
	"WS",
}

var cmddefStatenames = [...]string{}

const cmddefEofCode = 1
const cmddefErrCode = 2
const cmddefInitialStackSize = 16

//line cmddef.y:30

//line yacctab:1
var cmddefExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const cmddefPrivate = 57344

const cmddefLast = 5

var cmddefAct = [...]int8{
	4, 3, 2, 1, 5,
}

var cmddefPact = [...]int16{
	-4, -1000, -4, -1000, -1000, -1000,
}

var cmddefPgo = [...]int8{
	0, 3, 2, 1,
}

var cmddefR1 = [...]int8{
	0, 1, 2, 2, 3,
}

var cmddefR2 = [...]int8{
	0, 1, 2, 1, 1,
}

var cmddefChk = [...]int16{
	-1000, -1, -2, -3, 4, -3,
}

var cmddefDef = [...]int8{
	0, -2, 1, 3, 4, 2,
}

var cmddefTok1 = [...]int8{
	1,
}

var cmddefTok2 = [...]int8{
	2, 3, 4, 5, 6,
}

var cmddefTok3 = [...]int8{
	0,
}

var cmddefErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	cmddefDebug        = 0
	cmddefErrorVerbose = false
)

type cmddefLexer interface {
	Lex(lval *cmddefSymType) int
	Error(s string)
}

type cmddefParser interface {
	Parse(cmddefLexer) int
	Lookahead() int
}

type cmddefParserImpl struct {
	lval  cmddefSymType
	stack [cmddefInitialStackSize]cmddefSymType
	char  int
}

func (p *cmddefParserImpl) Lookahead() int {
	return p.char
}

func cmddefNewParser() cmddefParser {
	return &cmddefParserImpl{}
}

const cmddefFlag = -1000

func cmddefTokname(c int) string {
	if c >= 1 && c-1 < len(cmddefToknames) {
		if cmddefToknames[c-1] != "" {
			return cmddefToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func cmddefStatname(s int) string {
	if s >= 0 && s < len(cmddefStatenames) {
		if cmddefStatenames[s] != "" {
			return cmddefStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func cmddefErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !cmddefErrorVerbose {
		return "syntax error"
	}

	for _, e := range cmddefErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + cmddefTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(cmddefPact[state])
	for tok := TOKSTART; tok-1 < len(cmddefToknames); tok++ {
		if n := base + tok; n >= 0 && n < cmddefLast && int(cmddefChk[int(cmddefAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if cmddefDef[state] == -2 {
		i := 0
		for cmddefExca[i] != -1 || int(cmddefExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; cmddefExca[i] >= 0; i += 2 {
			tok := int(cmddefExca[i])
			if tok < TOKSTART || cmddefExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if cmddefExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += cmddefTokname(tok)
	}
	return res
}

func cmddeflex1(lex cmddefLexer, lval *cmddefSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(cmddefTok1[0])
		goto out
	}
	if char < len(cmddefTok1) {
		token = int(cmddefTok1[char])
		goto out
	}
	if char >= cmddefPrivate {
		if char < cmddefPrivate+len(cmddefTok2) {
			token = int(cmddefTok2[char-cmddefPrivate])
			goto out
		}
	}
	for i := 0; i < len(cmddefTok3); i += 2 {
		token = int(cmddefTok3[i+0])
		if token == char {
			token = int(cmddefTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(cmddefTok2[1]) /* unknown char */
	}
	if cmddefDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", cmddefTokname(token), uint(char))
	}
	return char, token
}

func cmddefParse(cmddeflex cmddefLexer) int {
	return cmddefNewParser().Parse(cmddeflex)
}

func (cmddefrcvr *cmddefParserImpl) Parse(cmddeflex cmddefLexer) int {
	var cmddefn int
	var cmddefVAL cmddefSymType
	var cmddefDollar []cmddefSymType
	_ = cmddefDollar // silence set and not used
	cmddefS := cmddefrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	cmddefstate := 0
	cmddefrcvr.char = -1
	cmddeftoken := -1 // cmddefrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		cmddefstate = -1
		cmddefrcvr.char = -1
		cmddeftoken = -1
	}()
	cmddefp := -1
	goto cmddefstack

ret0:
	return 0

ret1:
	return 1

cmddefstack:
	/* put a state and value onto the stack */
	if cmddefDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", cmddefTokname(cmddeftoken), cmddefStatname(cmddefstate))
	}

	cmddefp++
	if cmddefp >= len(cmddefS) {
		nyys := make([]cmddefSymType, len(cmddefS)*2)
		copy(nyys, cmddefS)
		cmddefS = nyys
	}
	cmddefS[cmddefp] = cmddefVAL
	cmddefS[cmddefp].yys = cmddefstate

cmddefnewstate:
	cmddefn = int(cmddefPact[cmddefstate])
	if cmddefn <= cmddefFlag {
		goto cmddefdefault /* simple state */
	}
	if cmddefrcvr.char < 0 {
		cmddefrcvr.char, cmddeftoken = cmddeflex1(cmddeflex, &cmddefrcvr.lval)
	}
	cmddefn += cmddeftoken
	if cmddefn < 0 || cmddefn >= cmddefLast {
		goto cmddefdefault
	}
	cmddefn = int(cmddefAct[cmddefn])
	if int(cmddefChk[cmddefn]) == cmddeftoken { /* valid shift */
		cmddefrcvr.char = -1
		cmddeftoken = -1
		cmddefVAL = cmddefrcvr.lval
		cmddefstate = cmddefn
		if Errflag > 0 {
			Errflag--
		}
		goto cmddefstack
	}

cmddefdefault:
	/* default state action */
	cmddefn = int(cmddefDef[cmddefstate])
	if cmddefn == -2 {
		if cmddefrcvr.char < 0 {
			cmddefrcvr.char, cmddeftoken = cmddeflex1(cmddeflex, &cmddefrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if cmddefExca[xi+0] == -1 && int(cmddefExca[xi+1]) == cmddefstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			cmddefn = int(cmddefExca[xi+0])
			if cmddefn < 0 || cmddefn == cmddeftoken {
				break
			}
		}
		cmddefn = int(cmddefExca[xi+1])
		if cmddefn < 0 {
			goto ret0
		}
	}
	if cmddefn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			cmddeflex.Error(cmddefErrorMessage(cmddefstate, cmddeftoken))
			Nerrs++
			if cmddefDebug >= 1 {
				__yyfmt__.Printf("%s", cmddefStatname(cmddefstate))
				__yyfmt__.Printf(" saw %s\n", cmddefTokname(cmddeftoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for cmddefp >= 0 {
				cmddefn = int(cmddefPact[cmddefS[cmddefp].yys]) + cmddefErrCode
				if cmddefn >= 0 && cmddefn < cmddefLast {
					cmddefstate = int(cmddefAct[cmddefn]) /* simulate a shift of "error" */
					if int(cmddefChk[cmddefstate]) == cmddefErrCode {
						goto cmddefstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if cmddefDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", cmddefS[cmddefp].yys)
				}
				cmddefp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if cmddefDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", cmddefTokname(cmddeftoken))
			}
			if cmddeftoken == cmddefEofCode {
				goto ret1
			}
			cmddefrcvr.char = -1
			cmddeftoken = -1
			goto cmddefnewstate /* try again in the same state */
		}
	}

	/* reduction by production cmddefn */
	if cmddefDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", cmddefn, cmddefStatname(cmddefstate))
	}

	cmddefnt := cmddefn
	cmddefpt := cmddefp
	_ = cmddefpt // guard against "declared and not used"

	cmddefp -= int(cmddefR2[cmddefn])
	// cmddefp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if cmddefp+1 >= len(cmddefS) {
		nyys := make([]cmddefSymType, len(cmddefS)*2)
		copy(nyys, cmddefS)
		cmddefS = nyys
	}
	cmddefVAL = cmddefS[cmddefp+1]

	/* consult goto table to find next state */
	cmddefn = int(cmddefR1[cmddefn])
	cmddefg := int(cmddefPgo[cmddefn])
	cmddefj := cmddefg + cmddefS[cmddefp].yys + 1

	if cmddefj >= cmddefLast {
		cmddefstate = int(cmddefAct[cmddefg])
	} else {
		cmddefstate = int(cmddefAct[cmddefj])
		if int(cmddefChk[cmddefstate]) != -cmddefn {
			cmddefstate = int(cmddefAct[cmddefg])
		}
	}
	// dummy call; replaced with literal code
	switch cmddefnt {

	case 1:
		cmddefDollar = cmddefS[cmddefpt-1 : cmddefpt+1]
//line cmddef.y:22
		{
			(cmddeflex).(*lexer).result = newNode(astCommand, "", cmddefDollar[1].node)
		}
	case 2:
		cmddefDollar = cmddefS[cmddefpt-2 : cmddefpt+1]
//line cmddef.y:25
		{
			cmddefDollar[1].node.children = append(cmddefDollar[1].node.children, cmddefDollar[2].node)
		}
	case 3:
		cmddefDollar = cmddefS[cmddefpt-1 : cmddefpt+1]
//line cmddef.y:26
		{
			cmddefVAL.node = newNode(astTokens, "", cmddefDollar[1].node)
		}
	case 4:
		cmddefDollar = cmddefS[cmddefpt-1 : cmddefpt+1]
//line cmddef.y:28
		{
			cmddefVAL.node = newNode(astToken, cmddefDollar[1].s)
		}
	}
	goto cmddefstack /* stack new state and value */
}
